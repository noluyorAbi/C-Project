# gitlab/workflows/build_test_deploy.yml
build_test_deploy:
  stage: build_test_deploy
  image: ubuntu:latest
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  before_script:
    - apt-get update
    - apt-get install -y build-essential valgrind gcc make
  script:
    # Checkout Code (wird automatisch durch GitLab gemacht, kein Schritt nötig)

    # Build Project
    - make CC=gcc CFLAGS="-Wall -Werror -g"

    # Make Executable
    - chmod +x ./bin/sysprak-client

    # Run Valgrind and Collect Output
    - |
      valgrind_output=$(valgrind --leak-check=full --track-origins=yes ./bin/sysprak-client -g 1234567890123 -p 1 2>&1 || true)
      echo "$valgrind_output" > valgrind.log

    # Analyze Valgrind Output
    - cat valgrind.log
    - |
      if echo "$valgrind_output" | grep -q "ERROR SUMMARY: [^0]"; then
        echo "Memory leaks detected"
        exit 1
      else
        echo "No memory leaks detected"
      fi

    # Deploy if Tests Pass
    - |
      if [ "$CI_PIPELINE_SOURCE" == "push" ] || [ "$CI_PIPELINE_SOURCE" == "merge_request_event" ]; then
        # Fügen Sie hier Ihre Deployment-Befehle hinzu
        echo "Deploying application..."
      fi
  artifacts:
    when: always
    paths:
      - valgrind.log
  allow_failure: false
